# Simple web infra: VPC, private and public subnets, bastion host, web server instance, ELB, access groups, NAT-GW
Parameters:
    WebInstanceType:
      Description: Choose type of EC2 instance to use for web servers
      Type: String
      Default: t2.micro
      AllowedValues:
        - t2.nano
        - t2.micro
        - t2.small
    AccessKeyName:
      Description: Select existing key pair for the instances
      Type: AWS::EC2::KeyPair::KeyName
    VpcCidrBlock:
      Description: Select existing key pair for the instances
      Type: String
      Default: "10.1.0.0/16"

Mappings:
  AMIByRegionMap:
    us-east-1:
      AMI: ami-b70554c8
    us-west-2:
      AMI: ami-a9d09ed1

Resources:

  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: cf-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: cf-igw

  # Internet gateway to VOC attachment
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Public subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join [ "" , [ !Ref "AWS::Region", "a" ] ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 8 ]]
      MapPublicIpOnLaunch: Boolean
      Tags:
        - Key: Name
          Value: cf-public-subnet
      VpcId: !Ref Vpc

  # Private subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join [ "" , [ !Ref "AWS::Region", "a" ] ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 8 ]]
      MapPublicIpOnLaunch: Boolean
      Tags:
        - Key: Name
          Value: cf-private-subnet
      VpcId: !Ref Vpc

  # Private Route table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc

  # Public Route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc

  # Public subnet-RouteTable association
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Private subnet-RouteTable association
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # Route for public subnet
  Type: AWS::EC2::Route
  DependsOn: VpcInternetGatewayAttachment
  Properties: 
    DestinationCidrBlock: 0.0.0.0/0
    GatewayId: !Ref InternetGateway
    RouteTableId: !Ref PublicRouteTable

  # Route for private subnet
  Type: AWS::EC2::Route
  Properties: 
    DestinationCidrBlock: 0.0.0.0/0
    GatewayId: !Ref NatGateway
    RouteTableId: !Ref PrivateRouteTable

  # Web server Security Group
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: cf-WebSecurityGroup
      GroupDescription: Allow HTTP + SSH from bastion host
      SecurityGroupIngress:
        - CidrIp: !GetAtt BastionInstance.PrivateIp
          IpProtocol: 6
          FromPort: 22
          ToPort: 22 
        - CidrIp: 0.0.0.0/0
          IpProtocol: 6
          FromPort: 80
          ToPort: 80

  # Bastion host Security Group
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: cf-BastionSecurityGroup
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: 6
          FromPort: 22
          ToPort: 22 

  # Elastic IP
  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  # Nat-gw
  NatGw:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VPCGatewayAttach
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: cf-nat-gw

  # Web server EC2 instance
  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref WebInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      KeyName: !Ref AccessKeyName
      Tags:
        - Key: Name
          Value: cf-web-1

  # Bastion host instance
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      KeyName: !Ref AccessKeyName
      Tags:
        - Key: Name
          Value: cf-bastion-1





